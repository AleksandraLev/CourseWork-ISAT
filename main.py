import os
import json
import random
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from breed_selector import handle_breed_dialog, start_breed_dialog
from text_utils import clean_text, correct_spelling_tag, lemmatize, correct_spelling_words
import pickle
import subprocess
from voice_utils import recognize_voice_from_file
from dotenv import load_dotenv

load_dotenv(dotenv_path="token.env")

with open("intents.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    intents = data['intents']
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
with open("chatbot_model_main.pkl", "rb") as f:
    model = pickle.load(f)
with open("vectorizer_main.pkl", "rb") as f:
    vectorizer = pickle.load(f)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—Å–∞—Ç—ã–π –±–æ—Ç –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω–∞. –°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE, is_not_goodbye = True):
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞
    context.user_data.pop("breed_dialog", None)
    if is_not_goodbye:
        await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É—Å–∞—Ç—ã–π –±–æ—Ç –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω–∞. üêæ\n"
        "–ú–æ–∂–µ—à—å –º–µ–Ω—è —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
        "- –æ —Å–∫–∏–¥–∫–∞—Ö\n"
        "- –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞\n"
        "- –æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n"
        "- –æ –∫–æ—Ä–º–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö\n"
        "- —Ç–∞–∫–∂–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–æ—Ä–æ–¥—É –∫–æ—Ç–∏–∫–∞\n\n"
        "–¢–∞–∫–∂–µ —è –∑–Ω–∞—é –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã. –í–≤–µ–¥–∏:\n"
        "/start - –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è, —É—Å–∞—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        "/start_over - –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ\n"
        "/help - –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.voice:
        file = await update.message.voice.get_file()
        file_path = "voice.ogg"
        wav_path = "voice.wav"

        await file.download_to_drive(file_path)

        # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–∞–π–ª main.py –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ ‚Äî –æ—Ç –Ω–µ–≥–æ –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è)
        BASE_DIR = Path(__file__).resolve().parent
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ ffmpeg
        ffmpeg_path = str(BASE_DIR / "ffmpeg-7.1.1-essentials_build" / "bin" / "ffmpeg.exe")
        
        try:
            subprocess.run([ffmpeg_path, "-i", file_path, wav_path, "-y"], check=True)
        except Exception as e:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return

        text = recognize_voice_from_file(wav_path)

        if text:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text("–í—ã —Å–∫–∞–∑–∞–ª–∏: " + text)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
    
    elif update.message.text:
        text = update.message.text.lower()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
    if "breed_dialog" in context.user_data:
        await handle_breed_dialog(update, context)
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned = clean_text(text)

    if cleaned in ["–¥–∞", "–∞–≥–∞", "—Ö–æ—á—É", "–∫–æ–Ω–µ—á–Ω–æ", "—É–≥—É"]:
        last = context.user_data.get("last_intent")
        print(last)
        if last == "–ø–∏—Ç–∞–Ω–∏–µ_royal":
            print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ_royal')
            await update.message.reply_text("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Royal Canin: https://example.com/royal-canin")
            context.user_data["last_intent"] = None
            return
        elif last == "–ø–∏—Ç–∞–Ω–∏–µ_purina":
            print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ_purina')
            await update.message.reply_text("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Purina One: https://example.com/purina")
            context.user_data["last_intent"] = None
            return
        elif last == "—Ä–µ–∫–ª–∞–º–∞":
            print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã')
            await update.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–∫–∏–¥–∫–∞—Ö: https://example.com/sales")
            context.user_data["last_intent"] = None
            return
        elif last == "—Ç–æ–≤–∞—Ä—ã":
            print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö')
            await update.message.reply_text("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–≤–ª–µ–Ω–Ω—ã–µ –≤ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä—ã: https://example.com/catalog")
            context.user_data["last_intent"] = None
            return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ intents.json
    pattern_to_tag = {}
    for intent in intents:
        for pattern in intent["patterns"]:
            pattern_to_tag[pattern] = intent["tag"]

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏ –∏–∑ intents.json
    corrected_tag, is_corrected = correct_spelling_tag(cleaned, pattern_to_tag)
    
    # –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    #lemmatized_text = lemmatize(corrected)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML-–º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if is_corrected:
        predicted_tag = corrected_tag
    else:
        predicted_words = correct_spelling_words(cleaned, pattern_to_tag)
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–µ–≥–∞–º
        X = vectorizer.transform([predicted_words])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å
        probs = model.predict_proba(X)[0]  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        max_prob_index = probs.argmax()  # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        max_prob = probs[max_prob_index]
        predicted_tag = model.classes_[max_prob_index] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥

        print(f"Predicted tag: {predicted_tag}, Probability: {max_prob}")
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 0.6 (–º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å)
        if max_prob < 0.23:
            await update.message.reply_text("–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return
        
    tag_to_intent = {intent["tag"]: intent for intent in intents}
    # –ï—Å–ª–∏ —Ç–µ–≥ ‚Äî —ç—Ç–æ –∑–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
    if predicted_tag == "–ø–æ–¥–±–æ—Ä_–ø–æ—Ä–æ–¥—ã":
        intent = tag_to_intent[predicted_tag]
        response = random.choice(intent["responses"])
        await update.message.reply_text(response)
        await start_breed_dialog(update, context)
        return
    elif predicted_tag == "–ø—Ä–æ—â–∞–Ω–∏–µ":
        intent = tag_to_intent[predicted_tag]
        response = random.choice(intent["responses"])
        await update.message.reply_text(response)
        await start_over(update, context, False)
        return
    elif predicted_tag in tag_to_intent:
        intent = tag_to_intent[predicted_tag]
        response = random.choice(intent["responses"])
        await update.message.reply_text(response)

        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å last_intent
        if predicted_tag in ["–ø–∏—Ç–∞–Ω–∏–µ_royal", "–ø–∏—Ç–∞–Ω–∏–µ_purina", "—Å–∫–∏–¥–∫–∏", "—Ç–æ–≤–∞—Ä—ã", "—Ä–µ–∫–ª–∞–º–∞"]:
            context.user_data["last_intent"] = predicted_tag
            print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º last_intent: {predicted_tag}")

        return
        
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ.")

def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("start_over", start_over))
    app.add_handler(CommandHandler("help", help_command))

    app.add_handler(MessageHandler((filters.TEXT & ~filters.COMMAND) | filters.VOICE, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
